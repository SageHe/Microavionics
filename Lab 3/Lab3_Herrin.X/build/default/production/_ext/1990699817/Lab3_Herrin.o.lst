MPASM 5.84                   LAB3_HERRIN.ASM   9-24-2020  14:08:30         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;;;;;;; ASEN 4-5067 Lab3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00002 ; Author: Sage Herrin
                      00003 ; Date  : 9/17/20
                      00004 ;
                      00005 ; DESCRIPTION
                      00006 ; On power up execute the following sequence:
                      00007 ;       RD5 ON for ~1 second then OFF
                      00008 ;       RD6 ON for ~1 second then OFF
                      00009 ;       RD7 ON for ~1 second then OFF
                      00010 ; LOOP on the following forever:
                      00011 ;       Blink "Alive" LED (RD4) ON for ~1sec then OFF for ~1sec
                      00012 ;       Read input from RPG (at least every 2ms) connected to pins 
                      00013 ;               RD0 and RD1 and mirror the output onto pins RJ2 and RJ3
                      00014 ;       ASEN5519 ONLY: Read input from baseboard RD3 button and toggle the value 
                      00015 ;               of RD2 such that the switch being pressed and RELEASED causes 
                      00016 ;               RD2 to change state from ON to OFF or OFF to ON
                      00017 ;       NOTE: ~1 second means +/- 100msec
                      00018 ;
                      00019 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00020 ;
                      00021 ; Mainline
                      00022 ; Loop
                      00023 ; Initial       -       Initialize ports and perform LED sequence
                      00024 ; WaitXXXms     -       Subroutine to wait XXXms
                      00025 ; Wait1sec      -       Subroutine to wait 1 sec 
                      00026 ; Check_SW      -       Subroutine to check the status of RD3 button and change RD2 (ASEN5519 ONLY)
                      00027 ; Check_RPG     -       Read the values of the RPG from RD0 and RD1 and display on RJ2 and RJ3
                      00028 ;
                      00029 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00030 
                      00031         LIST  P=PIC18F87K22, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
                      00032         #include P18F87K22.inc
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Mar 17 2019
                      00005 ;  MPASM PIC18F87K22 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2019 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      02986         LIST
                      00033 
                      00034 ;               MPLAB configuration directives
                      00035                 
1D 03 6A 7C F9 8B 91 F00036                 CONFIG  FOSC = HS1, XINST = OFF
       F C0 FF E0 FF 4
       0 
                      00037                 CONFIG  PWRTEN = ON, BOREN = ON, BORV = 1
                      00038                 CONFIG  WDTEN = OFF
                      00039                 
                      00040 ;;;;;;; Hardware notes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00041 ;
                      00042 ;       RPG-A port/pin is RJ2
                      00043 ;       RPG-B port/pin is RJ3
                      00044 
                      00045 ;;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00046 
                      00047         cblock  0x000   ;Start constant block values 
  00000000            00048             CNT         ;This sets variable CNT = 0x000 (literal or file location)
  00000001            00049             VAL1        ;This sets variable VAL1 = 0x001 (literal or file location)
                      00050         endc
                      00051 
                      00052 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00053 
                      00054 ; MOVLF is a macro that puts a literal value into a GPR or SFR
                      00055 MOVLF   macro  literal,dest
                      00056         movlw  literal
                      00057         movwf  dest
                      00058         endm
                      00059 
                      00060 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00061 
000000                00062         org  0x0000             ;Reset vector
000000 0000           00063         nop                     ;One instruction cycle delay.
000002 EF0E F000      00064         goto  Mainline          ;Redirect code to the Mainline Program
                      00065 
000008                00066         org  0x0008             ;High priority interrupt vector
000008 EF04 F000      00067         goto  $                 ;Return to current program counter location
                      00068 
000018                00069         org  0x0018             ;Low priority interrupt vector
000018 EF0C F000      00070         goto  $                 ;Return to current program counter location
                      00071 
                      00072 ;;;;;;; Mainline Program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00073 
00001C                00074 Mainline
00001C D801           00075         rcall  Initial          ;Jump to initialization routine
00001E                00076 Loop
                      00077 ; PUT YOUR CODE HERE
                      00078         ;MOVLF                  ; Add operand to finish the use of this macro 
00001E D7FF           00079         bra  Loop               ; Main loop should run forever after entry
                      00080 
                      00081 ;;;;;;; Initial subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00082 ;
                      00083 ; This subroutine performs all initializations of variables and registers.
                      00084 
000020                00085 Initial
                      00086         MOVLF   B'00001111',TRISD; Set TRISD
000020 0E0F               M         movlw  B'00001111'
000022 6E95               M         movwf  TRISD
                      00087                 ; Set TRISJ
                      00088         MOVLF   B'00000000',LATD; Turn off all LEDS
000024 0E00               M         movlw  B'00000000'
000026 6E8C               M         movwf  LATD
                      00089                 ; call subroutine to wait 1 second
                      00090         MOVLF   B'00100000',LATD; Turn ON RD5
000028 0E20               M         movlw  B'00100000'
00002A 6E8C               M         movwf  LATD
                      00091                 ; call subroutine to wait 1 second
                      00092                 ; Turn OFF RD5
                      00093                 ; Turn ON RD6
                      00094                 ; call subroutine to wait 1 second
                      00095                 ; Turn OFF RD6
                      00096                 ; Turn ON RD7
                      00097                 ; call subroutine to wait 1 second
                      00098                 ; Turn OFF RD7
00002C 0012           00099         return
                      00100 
                      00101 ;;;;;;; WaitXXXms subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00102 ;
                      00103 ; Subroutine to wait XXX ms
                      00104 ; NOTE - STUDENTS replace XXX with some value of your choosing
                      00105 ; Choose a suitable value to decrement a counter in a loop structure and 
                      00106 ; not using an excessive amount of program memory - i.e. don't use 100 nop's
                      00107                 
00002E                00108 WaitXXXms
                      00109                 ; Add code here
00002E 0012           00110                 return
                      00111 
                      00112 ;;;;;;; Wait1sec subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00113 ;
                      00114 ; Subroutine to wait 1 sec based on calling WaitXXXms YYY times or up to 3 nested loops
                      00115                                 
000030                00116 Wait1sec
                      00117                 ; Add code here
000030 0012           00118                 return
                      00119 
                      00120 ;;;;;;; Check_SW1 subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00121 ;
                      00122 ; Subroutine to check the status of RD3 button and change RD2 (ASEN5519 ONLY)
                      00123                                 
000032                00124 Check_SW1
                      00125                 ; Add code here
000032 0012           00126                 return
                      00127 
                      00128 ;;;;;;; Check_RPG subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00129 ;
                      00130 ; Subroutine to read the values of the RPG and display on RJ2 and RJ3
                      00131                                 
000034                00132 Check_RPG
                      00133                 ; Add code here
000034 0012           00134                 return      
                      00135         
                      00136 
                      00137         end

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

