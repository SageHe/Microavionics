Disassembly Listing for Lab5_original
Generated From:
C:/Users/sageh/Documents/5067/Lab 5/Lab5_original.X/dist/default/debug/Lab5_original.X.debug.cof
Oct 26, 2020 8:12:58 PM

---  C:/Users/sageh/Documents/5067/Lab 5/lab5_orig.asm  -------------------------------------------------
                                                  1:     ;;;;;;; ASEN 4-5067 Lab 5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  2:     ;
                                                  3:     ; Generate a jitterfree 10 Hz square wave on CCP1 output using compare mode
                                                  4:     ; with 24bit extension bytes.
                                                  5:     ; Use 16 MHz crystal and 4 MHz internal clock rate.
                                                  6:     ;
                                                  7:     ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  8:     ;
                                                  9:     ;Mainline
                                                  10:    ;  Initial
                                                  11:    ;
                                                  12:    ;HiPriISR 
                                                  13:    ;  (Consider using for other timing events)
                                                  14:    ;LoPriISR
                                                  15:    ;  CCP1handler
                                                  16:    ;  TMR1handler
                                                  17:    ;
                                                  18:    ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  19:    
                                                  20:            LIST  P=PIC18F87K22, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
                                                  21:            #include P18F87K22.inc
                                                  22:    
                                                  23:    ;		MPLAB configuration directives
                                                  24:    
                                                  25:    		CONFIG	FOSC = HS1, XINST = OFF
                                                  26:    		CONFIG	PWRTEN = ON, BOREN = ON, BORV = 1
                                                  27:    		CONFIG 	WDTEN = OFF
                                                  28:    		CONFIG	CCP2MX = PORTC	
                                                  29:    
                                                  30:            errorlevel -311	        ; Turn off message when 3-byte variable is loaded (24bit)
                                                  31:    
                                                  32:    HalfPeriod  equ  200000         ; Number of 250 ns instruction cycles in 0.05 sec (Half of 10 Hz)
                                                  33:    
                                                  34:    ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  35:    
                                                  36:            cblock  0x000
                                                  37:            WREG_TEMP		; Temp variables used in Low Pri ISR
                                                  38:            STATUS_TEMP
                                                  39:            TMR1X                   ; Eight-bit extension to TMR1
                                                  40:            CCPR1X                  ; Eight-bit extension to CCPR1
                                                  41:            DTIMEX                  ; Delta time variable of half period of square wave
                                                  42:            DTIMEH			; Will copy HalfPeriod constant into these registers
                                                  43:            DTIMEL
                                                  44:    	DIR_RPG			; Direction of RPG
                                                  45:    	RPG_TEMP		; Temp variable used for RPG state
                                                  46:    	
                                                  47:    	OLDPORTD		; Used to hold previous state of RPG
                                                  48:    	endc
                                                  49:    
                                                  50:    ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  51:    
                                                  52:    MOVLF   macro   literal,dest
                                                  53:            movlw   literal
                                                  54:            movwf   dest
                                                  55:            endm
                                                  56:    
                                                  57:    ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  58:    
                                                  59:            org  0x0000                    ; Reset vector
0000  EF0E     GOTO 0x1C                          60:            goto  Mainline
0002  F000     NOP
                                                  61:    
                                                  62:            org  0x0008                    ; High priority interrupt vector
0008  EF3E     GOTO 0x7C                          63:            goto  HiPriISR		       ; Send to HiPriISR subroutine handler	
000A  F000     NOP
                                                  64:    
                                                  65:            org  0x0018                    ; Low priority interrupt vector
0018  EF3F     GOTO 0x7E                          66:            goto  LoPriISR		       ; Send to LoPriISR subroutine handler	
001A  F000     NOP
                                                  67:    
                                                  68:    ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  69:    
                                                  70:    Mainline
001C  D801     RCALL 0x20                         71:            rcall  Initial                 ;Initialize everything
                                                  72:    L1
001E  D7FF     BRA 0x1E                           73:    	bra	L1
                                                  74:    
                                                  75:    
                                                  76:    ;;;;;;; Initial subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  77:    ;
                                                  78:    ; This subroutine performs SOME of the initializations of variables and registers.
                                                  79:    ; YOU will need to add those that are omitted/needed for your specific code
                                                  80:    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  81:    Initial
0020  0E40     MOVLW 0x40                         82:            MOVLF  low HalfPeriod,DTIMEL	; Load DTIME with HalfPeriod constant
0022  6E06     MOVWF 0x6, ACCESS
0024  0E0D     MOVLW 0xD                          83:            MOVLF  high HalfPeriod,DTIMEH
0026  6E05     MOVWF 0x5, ACCESS
0028  0E03     MOVLW 0x3                          84:    	MOVLF  upper HalfPeriod,DTIMEX
002A  6E04     MOVWF 0x4, ACCESS
                                                  85:    	
002C  6A94     CLRF TRISC, ACCESS                 86:            clrf TRISC			; Set I/O for PORTC
002E  6A8B     CLRF LATC, ACCESS                  87:    	clrf LATC			; Clear lines on PORTC
0030  0E03     MOVLW 0x3                          88:            MOVLF  B'00000011',T1CON	; 16 bit timer and Turn on TMR1
0032  6ECD     MOVWF T1CON, ACCESS
0034  0E08     MOVLW 0x8                          89:            MOVLF  B'00001000',CCP1CON	; Select compare mode
0036  6EBB     MOVWF CCP1CON, ACCESS
0038  010F     MOVLB 0xF                          90:    	MOVLB 0X0F				; Set BSR to bank F for SFRs outside of access bank				
003A  0E00     MOVLW 0x0                          91:            MOVLW  B'00000000'		; NOTE: Macro cannot be used, does not handle when a=1
003C  6F2D     MOVWF 0x2D, BANKED                 92:    	MOVWF CCPTMRS0,1		; Set TMR1 for use with ECCP1, a=1!!
003E  8ED0     BSF RCON, 7, ACCESS                93:            bsf  RCON,IPEN			; Enable priority levels
0040  909F     BCF IPR1, 0, ACCESS                94:            bcf  IPR1,TMR1IP		; Assign low priority to TMR1 interrupts
0042  92A5     BCF IPR3, 1, ACCESS                95:            bcf  IPR3,CCP1IP		;  and to ECCP1 interrupts
0044  6A02     CLRF 0x2, ACCESS                   96:            clrf  TMR1X			; Clear TMR1X extension
0046  0E03     MOVLW 0x3                          97:            MOVLF  upper HalfPeriod,CCPR1X	; Make first 24-bit compare occur quickly 
0048  6E03     MOVWF 0x3, ACCESS
                                                  98:    					;  16bit+8bit ext Note: 200000 (= 0x30D40)
004A  82A3     BSF PIE3, 1, ACCESS                99:            bsf  PIE3,CCP1IE		; Enable ECCP1 interrupts
004C  809D     BSF PIE1, 0, ACCESS                100:           bsf  PIE1,TMR1IE		; Enable TMR1 interrupts
004E  8CF2     BSF INTCON, 6, ACCESS              101:           bsf  INTCON,GIEL		; Enable low-priority interrupts to CPU
0050  8EF2     BSF INTCON, 7, ACCESS              102:           bsf  INTCON,GIEH		; Enable all interrupts
0052  0012     RETURN 0                           103:           return
                                                  104:   
                                                  105:   ;;;;;;; RPG subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  106:   ;
                                                  107:   ; Credit: This subroutine modified from Peatman book Chapter 8 - RPG
                                                  108:   ; This subroutine decyphers RPG changes into values of DIR_RPG of 0, +1, or -1.
                                                  109:   ; DIR_RPG = +1 for CW change, 0 for no change, and -1 for CCW change.
                                                  110:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  111:   	
                                                  112:   RPG
0054  6A07     CLRF 0x7, ACCESS                   113:           clrf   DIR_RPG          ; Clear for "no change" return value.
0056  5083     MOVF PORTD, W, ACCESS              114:           movf   PORTD,W          ; Copy PORTD into W.
0058  6E08     MOVWF 0x8, ACCESS                  115:           movwf  RPG_TEMP         ;  and RPG_TEMP.
005A  1809     XORWF 0x9, W, ACCESS               116:           xorwf  OLDPORTD,W       ; Check for any change?
005C  0B03     ANDLW 0x3                          117:           andlw  B'00000011'      ; Masks just the RPG pins          
005E  E00B     BZ 0x76                            118:           bz	L8		; If zero, RPG has not moved, ->return
                                                  119:           ; But if the two bits have changed then...
                                                  120:   	; Form what a CCW change would produce.          	
0060  3009     RRCF 0x9, W, ACCESS                121:   	rrcf OLDPORTD,W		; Rotate right once into carry bit   
0062  E302     BNC 0x68                           122:   	bnc L9			; If no carry, then bit 0 was a 0 -> branch to L9
0064  92E8     BCF WREG, 1, ACCESS                123:           bcf  WREG,1		; Otherwise, bit 0 was a 1. Then clear bit 1
                                                  124:   				; to simulate what a CCW change would produce
0066  D001     BRA 0x6A                           125:           bra L10			; Branch to compare if RPG actually matches new CCW pattern in WREG
                                                  126:   L9
0068  82E8     BSF WREG, 1, ACCESS                127:           bsf  WREG,1		; Set bit 1 since there was no carry
                                                  128:   				; again to simulate what CCW would produce
                                                  129:   L10				; Test direction of RPG
006A  1808     XORWF 0x8, W, ACCESS               130:           xorwf  RPG_TEMP,W       ; Did the RPG actually change to this output?
006C  0B03     ANDLW 0x3                          131:           andlw  B'00000011'      ; Masks the RPG pins  
006E  E102     BNZ 0x74                           132:           bnz L11			; If not zero, then branch to L11 for CW case
0070  0607     DECF 0x7, F, ACCESS                133:           decf DIR_RPG,F          ; If zero then change DIR_RPG to -1, must be CCW. 
0072  D001     BRA 0x76                           134:           bra	L8		; Done so branch to return
                                                  135:   L11				; CW case 
0074  2A07     INCF 0x7, F, ACCESS                136:           incf DIR_RPG,F		; Change DIR_RPG to +1 for CW.
                                                  137:   L8
0076  C008     MOVFF 0x8, 0x9                     138:           movff  RPG_TEMP,OLDPORTD       	; Save RPG state as OLDPORTD
0078  F009     NOP
007A  0012     RETURN 0                           139:           return
                                                  140:   
                                                  141:   ;;;;;;; HiPriISR interrupt service routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  142:   
                                                  143:   HiPriISR                        ; High-priority interrupt service routine
                                                  144:   ;       <execute the handler for interrupt source>
                                                  145:   ;       <clear that source's interrupt flag>
007C  0011     RETFIE 1                           146:           retfie  FAST            ; Return and restore STATUS, WREG, and BSR
                                                  147:                                   ; from shadow registers
                                                  148:   
                                                  149:   ;;;;;;; LoPriISR interrupt service routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  150:   
                                                  151:   LoPriISR				; Low-priority interrupt service routine
007E  CFD8     MOVFF STATUS, 0x1                  152:           movff  STATUS,STATUS_TEMP	; Set aside STATUS and WREG
0080  F001     NOP
0082  6E00     MOVWF 0x0, ACCESS                  153:           movwf  WREG_TEMP
                                                  154:   
                                                  155:   L2
0084  A2A4     BTFSS PIR3, 1, ACCESS              156:           btfss PIR3,CCP1IF
0086  D002     BRA 0x8C                           157:           bra	L3
0088  D809     RCALL 0x9C                         158:               rcall  CCP1handler		; Call CCP1handler for generating RC2 output
008A  D7FC     BRA 0x84                           159:           bra	L2
                                                  160:   L3
008C  A09E     BTFSS PIR1, 0, ACCESS              161:           btfss PIR1,TMR1IF
008E  D002     BRA 0x94                           162:           bra	L4
0090  D817     RCALL 0xC0                         163:               rcall TMR1handler		; Call TMR1handler for timing with CCP1
0092  D7F8     BRA 0x84                           164:           bra	L2
                                                  165:   L4
0094  5000     MOVF 0x0, W, ACCESS                166:           movf  WREG_TEMP,W		; Restore WREG and STATUS
0096  C001     MOVFF 0x1, STATUS                  167:           movff  STATUS_TEMP,STATUS
0098  FFD8     NOP
009A  0010     RETFIE 0                           168:           retfie				; Return from interrupt, reenabling GIEL
                                                  169:   
                                                  170:   CCP1handler			; First must test of TMR1IF occurred at the same time
009C  A09E     BTFSS PIR1, 0, ACCESS              171:           btfss PIR1,TMR1IF	; If TMR1's overflow flag is set? skip to test CCP bit7
009E  D004     BRA 0xA8                           172:           bra	L5		; If TMR1F was clear, branch to check extension bytes
00A0  BEBD     BTFSC CCPR1H, 7, ACCESS            173:           btfsc CCPR1H,7		; Is bit 7 a 0? Then TMR1/CCP just rolled over, need to inc TMR1X
00A2  D002     BRA 0xA8                           174:           bra	L5		; Is bit 7 a 1? Then TMR1/CCP is full, TMR1handler already inc TMR1X 
00A4  2A02     INCF 0x2, F, ACCESS                175:           incf  TMR1X,F		; TMR1/CCP just rolled over, must increment TMR1 extension
00A6  909E     BCF PIR1, 0, ACCESS                176:           bcf  PIR1,TMR1IF	; and clear flag (Since TMR1 handler was unable to-arrived here first)
                                                  177:   L5
00A8  5002     MOVF 0x2, W, ACCESS                178:           movf  TMR1X,W		; Check whether extensions are equal
00AA  5C03     SUBWF 0x3, W, ACCESS               179:           subwf  CCPR1X,W
00AC  E107     BNZ 0xBC                           180:           bnz	L7		; If not, branch to return
00AE  70BB     BTG CCP1CON, 0, ACCESS             181:           btg  CCP1CON,0		; If zero, they are equal, and toggle control bit H/L
00B0  5006     MOVF 0x6, W, ACCESS                182:           movf  DTIMEL,W		; and add half period to CCPR1 to add more pulse time
00B2  26BC     ADDWF CCPR1, F, ACCESS             183:           addwf  CCPR1L,F
00B4  5005     MOVF 0x5, W, ACCESS                184:           movf  DTIMEH,W
00B6  22BD     ADDWFC CCPR1H, F, ACCESS           185:           addwfc  CCPR1H,F
00B8  5004     MOVF 0x4, W, ACCESS                186:           movf  DTIMEX,W
00BA  2203     ADDWFC 0x3, F, ACCESS              187:           addwfc  CCPR1X,F
                                                  188:   L7
00BC  92A4     BCF PIR3, 1, ACCESS                189:           bcf  PIR3,CCP1IF        ; Clear flag
00BE  0012     RETURN 0                           190:           return
                                                  191:   
                                                  192:   TMR1handler
00C0  2A02     INCF 0x2, F, ACCESS                193:           incf  TMR1X,F		;Increment Timer1 extension
00C2  909E     BCF PIR1, 0, ACCESS                194:           bcf  PIR1,TMR1IF        ;Clear flag and return to service routine
00C4  0012     RETURN 0                           195:           return
                                                  196:   
                                                  197:           end
